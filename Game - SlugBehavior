using UnityEngine;

public class SlugBehavior : MonoBehaviour
{
    // Slug stats
    public float maxMoisture = 100f;
    public float currentMoisture;
    public float moistureDepletionRate = 3f; // How quickly moisture depletes per second
    public float healthDepletionRate = 5f;   // How quickly health depletes when dry
    public float maxHealth = 100f;
    public float currentHealth;
    
    // Movement parameters
    public float maxSpeed = 0.5f;      // Slugs are slow!
    public float currentSpeed;
    public float slimeTrailDuration = 5f;
    
    // References
    private Rigidbody2D rb;
    private Animator animator;
    public GameObject slimeTrailPrefab;
    
    // Environmental detection
    private bool isInMoistArea = false;
    private bool isInSunlight = false;
    
    void Start()
    {
        rb = GetComponent<Rigidbody2D>();
        animator = GetComponent<Animator>();
        
        // Initialize stats
        currentMoisture = maxMoisture;
        currentHealth = maxHealth;
        currentSpeed = maxSpeed;
    }
    
    void Update()
    {
        // Check environment conditions
        CheckEnvironment();
        
        // Handle moisture mechanics
        ManageMoisture();
        
        // Handle player input for movement
        HandleMovement();
        
        // Leave slime trail
        ManageSlimeTrail();
        
        // Update animation states
        UpdateAnimations();
        
        // Check for death condition
        CheckHealthStatus();
    }
    
    void CheckEnvironment()
    {
        // Check if on moist ground using raycasts
        RaycastHit2D hit = Physics2D.Raycast(transform.position, Vector2.down, 0.2f);
        if (hit.collider != null)
        {
            // Check ground type using tags or layers
            if (hit.collider.CompareTag("MoistGround") || hit.collider.CompareTag("Water"))
            {
                isInMoistArea = true;
            }
            else
            {
                isInMoistArea = false;
            }
            
            // Check if in direct sunlight using another system
            // This could be a shadow detection system or a custom sunlight zone
            if (hit.collider.CompareTag("Sunlight"))
            {
                isInSunlight = true;
            }
            else
            {
                isInSunlight = false;
            }
        }
    }
    
    void ManageMoisture()
    {
        // Lose moisture faster in sunlight
        float depletionMultiplier = isInSunlight ? 3f : 1f;
        
        // Gain moisture in moist areas
        if (isInMoistArea)
        {
            currentMoisture += 5f * Time.deltaTime;
        }
        // Lose moisture everywhere else
        else
        {
            currentMoisture -= moistureDepletionRate * depletionMultiplier * Time.deltaTime;
        }
        
        // Clamp moisture level
        currentMoisture = Mathf.Clamp(currentMoisture, 0f, maxMoisture);
        
        // Adjust speed based on moisture
        currentSpeed = maxSpeed * (currentMoisture / maxMoisture);
        
        // Lose health if completely dry
        if (currentMoisture <= 0)
        {
            currentHealth -= healthDepletionRate * Time.deltaTime;
        }
    }
    
    void HandleMovement()
    {
        // Get player input
        float horizontal = Input.GetAxisRaw("Horizontal");
        float vertical = Input.GetAxisRaw("Vertical");
        
        // Create movement vector
        Vector2 movement = new Vector2(horizontal, vertical).normalized;
        
        // Apply movement with current speed (affected by moisture)
        rb.velocity = movement * currentSpeed;
    }
    
    void ManageSlimeTrail()
    {
        // Leave slime trail at intervals (costs a tiny bit of moisture)
        if (rb.velocity.magnitude > 0.1f)
        {
            // Leave trail every 0.5 seconds of movement
            if (Time.time % 0.5f < 0.02f)
            {
                currentMoisture -= 0.1f;
                GameObject trail = Instantiate(slimeTrailPrefab, transform.position, Quaternion.identity);
                Destroy(trail, slimeTrailDuration);
            }
        }
    }
    
    void UpdateAnimations()
    {
        // Update animation states based on movement and conditions
        if (animator != null)
        {
            animator.SetFloat("Speed", rb.velocity.magnitude);
            animator.SetFloat("Moisture", currentMoisture / maxMoisture);
            animator.SetBool("IsDrying", currentMoisture < 30f);
        }
    }
    
    void CheckHealthStatus()
    {
        // Death condition
        if (currentHealth <= 0)
        {
            // Trigger death event for player to jump to new host
            FindObjectOfType<PlayerController>().SlugDied();
            Destroy(gameObject);
        }
    }
    
    // Method for the player's energy being to leave this host
    public void LeaveHost()
    {
        // Animation and effects for leaving
        if (animator != null)
        {
            animator.SetTrigger("LeaveHost");
        }
        
        // Return control to AI after delay
        StartCoroutine(ReturnToAI());
    }
    
    System.Collections.IEnumerator ReturnToAI()
    {
        yield return new WaitForSeconds(1f);
        // Change to AI control
        this.enabled = false;
        GetComponent<SlugAI>().enabled = true;
    }
}
